#!/bin/bash

set -o errexit
set -o pipefail

function env {
  echo ">> Copying environment file..."
  if [ -f .env ]; then
    echo ".env already exists, overwriting..."
  else
    echo "Creating .env file from .env.example"
  fi
  cp -f .env.example .env
  chmod 664 .env
  chown 1000:1000 .env
}

function get_compose_file {
  source .env
  if [ "$APP_ENV" == "production" ]; then
    echo "docker-compose.production.yml"
  elif [ "$APP_ENV" == "local" ]; then
    echo "docker-compose.local.yml"
  elif [[ "$1" == "--no-check" ]]; then
    echo $APP_ENV
  else
    echo "Error: APP_ENV must be 'local' or 'production'. Current value: '$APP_ENV'" >&2
    exit 1
  fi
}

function setup {
  echo "Running setup..."

  if [[ "$1" == "--env" || "$2" == "--env" ]]; then
    env || echo "[warn] Failed to copy .env (env); continuing..."
  fi

  compose_file=$(get_compose_file)
  echo ""
  echo "=================================================="
  if [ "$compose_file" == "docker-compose.local.yml" ]; then
    echo "    RUNNING IN LOCAL ENVIRONMENT"
  elif [ "$compose_file" == "docker-compose.production.yml" ]; then
    echo "    RUNNING IN PRODUCTION ENVIRONMENT"
  else
    echo "    ERROR: UNKNOWN ENVIRONMENT"
    echo "    APP_ENV value: $(source .env && echo $APP_ENV)"
    echo "    Please check your .env file and set APP_ENV to 'local' or 'production'"
  fi
  echo "    Docker Compose: $compose_file"
  echo "=================================================="
  echo ""

  up || echo "[warn] Failed to start containers (up); continuing..."

  composer || echo "[warn] Composer install failed (composer); continuing..."

  # Assets são opcionais no setup - rode separadamente se precisar
  if [ "$APP_ENV" == "local" ]; then
    echo ">> Starting Vite dev server in background..."
    npm-local-bg || echo "[warn] Failed to start Vite dev server in background; continuing..."
  elif [ "$APP_ENV" == "production" ]; then
    npm-build || echo "[warn] NPM build failed (npm-build); continuing..."
  fi

  gen_key || echo "[warn] Key generation failed (gen_key); continuing..."

  migrate || echo "[warn] Migrations failed (migrate); continuing..."

  seed || echo "[warn] Seeding failed (seed); continuing..."
}

function setup-hard {
  if [[ "$1" != "-y" && "$2" != "-y" ]]; then
    echo "WARNING: You are about to run setup-hard."
    echo "This will delete and recreate your database, node_modules, vendor, and all Docker containers."
    echo -n "Proceed only if you are sure. (y/n): "
    read confirm

    if [ "$confirm" != "y" ]; then
      echo "Aborting setup-hard."
      exit 1
    fi
  fi

  if [[ "$1" == "--env" || "$2" == "--env" ]]; then
    env || echo "[warn] Failed to copy .env (env); continuing..."
  fi

  echo "Running setup-hard..."

  remove-all -y || echo "[warn] Could not complete cleanup (remove-all); continuing..."

  if [[ "$1" == "--env" || "$2" == "--env" ]]; then
    setup --env || echo "[warn] Setup process failed (setup)."
  else
    setup || echo "[warn] Setup process failed (setup)."
  fi
}

function npm-local {
  source .env
  if [ "$APP_ENV" != "local" ]; then
    echo "Error: npm-local can only be run in 'local' environment. Current APP_ENV: '$APP_ENV'" >&2
    exit 1
  fi

  # Check if npm is available in container, fallback to host
  if docker compose -f "$(get_compose_file)" exec app which npm >/dev/null 2>&1; then
    echo ">> Installing Node.js dependencies in container..."
    docker compose -f "$(get_compose_file)" exec app npm install
    
    echo ">> Starting Vite dev server (press Ctrl+C to stop)..."
    echo "🌐 Access your site at: http://localhost:$(grep WEB_SERVER_PORT_LOCAL .env | cut -d'=' -f2)"
    echo "🔥 Vite HMR will be available for hot reloading"
    echo ""
    docker compose -f "$(get_compose_file)" exec app npm run dev
  else
    echo ">> Node.js not found in container, running on host..."
    
    if ! command -v npm &> /dev/null; then
      echo "Error: npm not found on host either. Please install Node.js or rebuild containers with Node.js support."
      exit 1
    fi
    
    echo ">> Installing Node.js dependencies on host..."
    npm install
    
    echo ">> Starting Vite dev server (press Ctrl+C to stop)..."
    echo "🌐 Access your site at: http://localhost:$(grep WEB_SERVER_PORT_LOCAL .env | cut -d'=' -f2)"
    echo "🔥 Vite HMR will be available for hot reloading"
    echo ""
    npm run dev
  fi
}

function npm-local-bg {
  source .env
  if [ "$APP_ENV" != "local" ]; then
    echo "Error: npm-local-bg can only be run in 'local' environment. Current APP_ENV: '$APP_ENV'" >&2
    exit 1
  fi

  # Check if Vite is already running
  if pgrep -f "vite" > /dev/null || pgrep -f "npm run dev" > /dev/null; then
    echo "🔥 Vite dev server is already running!"
    return 0
  fi

  # Check if npm is available in container, fallback to host
  if docker compose -f "$(get_compose_file)" exec app which npm >/dev/null 2>&1; then
    echo ">> Installing Node.js dependencies in container..."
    docker compose -f "$(get_compose_file)" exec app npm install
    
    echo ">> Starting Vite dev server in background..."
    echo "🌐 Access your site at: http://localhost:$(grep WEB_SERVER_PORT_LOCAL .env | cut -d'=' -f2)"
    echo "🔥 Vite HMR will be available for hot reloading"
    echo "📋 To stop Vite: ./run stop-vite"
    echo ""
    
    # Start Vite in background and save PID
    docker compose -f "$(get_compose_file)" exec -d app npm run dev
    
    # Wait a bit to check if it started successfully
    sleep 3
    if docker compose -f "$(get_compose_file)" exec app pgrep -f "vite" > /dev/null; then
      echo "✅ Vite dev server started successfully in background!"
    else
      echo "❌ Failed to start Vite dev server"
      return 1
    fi
  else
    echo ">> Node.js not found in container, running on host..."
    
    if ! command -v npm &> /dev/null; then
      echo "Error: npm not found on host either. Please install Node.js or rebuild containers with Node.js support."
      exit 1
    fi
    
    echo ">> Installing Node.js dependencies on host..."
    npm install
    
    echo ">> Starting Vite dev server in background..."
    echo "🌐 Access your site at: http://localhost:$(grep WEB_SERVER_PORT_LOCAL .env | cut -d'=' -f2)"
    echo "🔥 Vite HMR will be available for hot reloading"
    echo "📋 To stop Vite: ./run stop-vite"
    echo ""
    
    # Start Vite in background and save PID
    nohup npm run dev > vite.log 2>&1 &
    echo $! > vite.pid
    
    # Wait a bit to check if it started successfully
    sleep 3
    if kill -0 $(cat vite.pid 2>/dev/null) 2>/dev/null; then
      echo "✅ Vite dev server started successfully in background!"
      echo "📋 PID: $(cat vite.pid)"
      echo "📋 Log: tail -f vite.log"
    else
      echo "❌ Failed to start Vite dev server"
      return 1
    fi
  fi
}

function stop-vite {
  source .env
  echo ">> Stopping Vite dev server..."
  
  # Try to stop container-based Vite first
  if docker compose -f "$(get_compose_file)" exec app pgrep -f "vite" > /dev/null 2>&1; then
    docker compose -f "$(get_compose_file)" exec app pkill -f "vite" || true
    docker compose -f "$(get_compose_file)" exec app pkill -f "npm run dev" || true
    echo "✅ Container-based Vite dev server stopped!"
  fi
  
  # Try to stop host-based Vite
  if [ -f vite.pid ]; then
    local pid=$(cat vite.pid)
    if kill -0 $pid 2>/dev/null; then
      kill $pid
      echo "✅ Host-based Vite dev server stopped! (PID: $pid)"
    fi
    rm -f vite.pid
  fi
  
  # Kill any remaining vite processes
  pkill -f "vite" 2>/dev/null || true
  pkill -f "npm run dev" 2>/dev/null || true
  
  echo "🔥 All Vite processes stopped!"
}

function npm-build {
  source .env
  echo ">> Installing Node.js dependencies and building assets for production..."
  
  # Check if npm is available in container, fallback to host
  if docker compose -f "$(get_compose_file)" exec app which npm >/dev/null 2>&1; then
    echo ">> Installing Node.js dependencies in container..."
    docker compose -f "$(get_compose_file)" exec app npm install
    
    echo ">> Building assets for production..."
    docker compose -f "$(get_compose_file)" exec app npm run build
  else
    echo ">> Node.js not found in container, running on host..."
    
    if ! command -v npm &> /dev/null; then
      echo "Error: npm not found on host either. Please install Node.js or rebuild containers with Node.js support."
      exit 1
    fi
    
    echo ">> Installing Node.js dependencies on host..."
    npm install
    
    echo ">> Building assets for production..."
    npm run build
  fi
}

function npm-quick {
  source .env
  echo ">> Quick asset build (no watch mode)..."
  
  if [ "$APP_ENV" != "local" ]; then
    echo "Error: npm-quick is for local development only. Use npm-build for production." >&2
    exit 1
  fi
  
  # Check if npm is available in container, fallback to host
  if docker compose -f "$(get_compose_file)" exec app which npm >/dev/null 2>&1; then
    echo ">> Installing dependencies and building assets..."
    docker compose -f "$(get_compose_file)" exec app npm install
    docker compose -f "$(get_compose_file)" exec app npm run build
  else
    echo ">> Node.js not found in container, running on host..."
    
    if ! command -v npm &> /dev/null; then
      echo "Error: npm not found on host either. Please install Node.js or rebuild containers with Node.js support."
      exit 1
    fi
    
    echo ">> Installing dependencies and building assets..."
    npm install
    npm run build
  fi
  
  echo "✅ Assets built! Your site should work without Vite dev server."
}

function seed {
  source .env
  echo ">> Seeding database..."
  docker compose -f "$(get_compose_file)" exec app php artisan db:seed --force
}

function phpstan {
  TEST_PATH="${@:-}"
  docker compose -f "$(get_compose_file)" run --rm app ./vendor/bin/phpstan analyse --memory-limit 1G ${TEST_PATH}
}

function phpcs {
  if [ $# -eq 0 ]; then
    docker compose -f "$(get_compose_file)" run --rm app ./vendor/bin/phpcs app routes tests
  else
    docker compose -f "$(get_compose_file)" run --rm app ./vendor/bin/phpcs "$@"
  fi
}

function phpcbf {
  if [ $# -eq 0 ]; then
    docker compose -f "$(get_compose_file)" run --rm app ./vendor/bin/phpcbf app routes tests
  else
    docker compose -f "$(get_compose_file)" run --rm app ./vendor/bin/phpcbf "$@"
  fi
}

function test {
  docker compose -f "$(get_compose_file)" exec app php artisan test
}

function all-tests {
  set -e
  ./run test
  ./run phpcs
  ./run phpstan
}

function ps {
  docker compose -f "$(get_compose_file)" ps "${@}"
}

function up {
  source .env
  docker compose -f "$(get_compose_file)" up -d "${@}"
}

function down {
  docker compose -f "$(get_compose_file)" down "${@}"
}

function gen_key {
  source .env
  echo ">> Generating application key..."
  docker compose -f "$(get_compose_file)" exec app php artisan key:generate
}

function migrate {
  source .env
  echo ">> Running database migrations..."
  docker compose -f "$(get_compose_file)" exec app php artisan migrate
}

function storage_link {
  source .env
  echo ">> Creating storage symbolic link..."
  docker compose -f "$(get_compose_file)" exec app php artisan storage:link
}

function composer {
  source .env
  echo ">> Installing Composer dependencies..."
  docker compose -f "$(get_compose_file)" exec app composer install --no-interaction --optimize-autoloader
}

function remove-all {
  if [[ "$1" != "-y" ]]; then
    echo "WARNING: You are about to run remove-all."
    echo "This will delete and recreate your production database, node_modules, vendor, and all Docker containers."
    echo -n "Proceed only if you are sure. (y/n): "
    read confirm

    if [ "$confirm" != "y" ]; then
      echo "Aborting setup-production-hard."
      exit 1
    fi
  fi

  echo ">> Cleaning up .env, mysql_data, vendor, containers, images, and volumes..."

  rm -rf mysql_data 2>/dev/null || echo "mysql_data directory not found, skipping removal"
  rm -rf vendor 2>/dev/null || echo "vendor directory not found, skipping removal"
  rm -rf node_modules 2>/dev/null || echo "node_modules directory not found, skipping removal"
  rm -rf storage/app/public/products 2>/dev/null || echo "storage/app/public/products directory not found, skipping removal"

  remove-all-docker || echo "[warn] Could not complete Docker cleanup (remove-all-docker); continuing..."

  echo ">> Cleanup completed!"
}

function remove-all-docker {
  echo ">> Removing all Docker containers, images, and volumes..."

  docker ps -a --filter "name=e-museu" -q | xargs -r docker rm -f

  docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep "e-museu" | awk '{print $2}' | xargs -r docker rmi -f

  docker volume ls --format "{{.Name}}" | grep "e-museu" | xargs -r docker volume rm -f
}

function exec {
  source .env
  if [ $# -eq 0 ]; then
    echo ">> Missing command to run inside app container"
    exit 1
  fi

  echo ">> Executing in app container: $*"
  sudo docker exec -it e-museu-app-1 "$@"
}

function help {
  echo "Usage: run [command]"
  echo "Available commands:"
  echo ""
  echo "Environment & Setup:"
  echo "  env          - Copy environment file (.env.example to .env)"
  echo "  setup        - Complete environment setup (up, composer, gen_key, migrate, seed)"
  echo "  setup --env  - Same as setup but copies .env.example to .env first"
  echo "  setup-hard   - Hard reset: remove all data and containers, then run setup"
  echo "  setup-hard --env - Same as setup-hard but copies .env.example to .env first"
  echo "  up           - Start Docker containers"
  echo "  down         - Stop Docker containers"
  echo "  ps           - Show container status"
  echo "  remove-all   - Clean up environment (remove mysql_data, vendor, containers, images, volumes)"
  echo ""
  echo "Laravel Commands:"
  echo "  gen_key      - Generate Laravel application key"
  echo "  migrate      - Run database migrations"
  echo "  seed         - Seed database with initial data"
  echo "  storage_link - Create storage symbolic link"
  echo "  composer     - Install Composer dependencies"
  echo ""
  echo "Asset Management:"
  echo "  npm-local    - Start Vite dev server with hot reload (blocks terminal)"
  echo "  npm-local-bg - Start Vite dev server in background (non-blocking)"
  echo "  stop-vite    - Stop background Vite dev server"
  echo "  npm-quick    - Quick asset build without watch mode (non-blocking)"
  echo "  npm-build    - Build assets for production"
  echo ""
  echo "Testing & Code Quality:"
  echo "  test         - Run PHPUnit tests"
  echo "  phpstan      - Run PHPStan static analysis (Level 8)"
  echo "  phpcs        - Run PHP Code Sniffer (PSR-12 standards)"
  echo "  phpcbf       - Run PHP Code Beautifier and Fixer"
  echo "  all-tests    - Run all tests and code quality checks (test + phpcs + phpstan)"
  echo ""
  echo "Utilities:"
  echo "  exec <cmd>   - Execute command inside app container"
  echo "  help         - Show this help message"
  echo ""
  echo "Examples:"
  echo "  ./run setup --env              # Complete project setup with new .env file"
  echo "  ./run setup-hard --env         # Hard reset with new .env file"
  echo "  ./run test                     # Run tests"
  echo "  ./run phpstan app/Models       # Analyze specific directory"
  echo "  ./run exec php artisan tinker  # Open Laravel tinker"
}

TIMEFORMAT='\nTask completed in %3lR'
time "${@}"